Set 1:

1. Customer Order History
   Write a stored procedure that takes a `customerNumber` as input and returns all their orders with order dates, status, and total order value.

2. Top Selling Products
   Create a stored procedure that retrieves the top N best-selling products (by quantity ordered) within a given date range.

3. Employee Sales Performance
   Develop a stored procedure that, for a given `employeeNumber`, shows total sales amount handled by that employee (through their customers), grouped by year.

4. Stock Reorder Alert
   Write a stored procedure that lists all products where `quantityInStock` falls below a given threshold (passed as input), along with supplier/vendor details.

5. Customer Payment Report
   Create a stored procedure that generates a report of all payments made by a specific customer, showing total amount paid and balance compared to their credit limit.

6. Late Orders Report
   Write a stored procedure that returns all orders where the shippedDate is later than the requiredDate. The procedure should include the order number, customer name, order date, required date, shipped date, and how many days late it was.

7. Customer Outstanding Balance
   Create a stored procedure that, given a customerNumber, calculates the customer’s outstanding balance by subtracting total payments from total order amounts.

8. Monthly Sales Report
   Write a stored procedure that takes a year and month as input and returns total sales for that period, grouped by product line.

9. Employee Customer List
   Develop a stored procedure that, given an employeeNumber, lists all the customers assigned to that employee (from salesRepEmployeeNumber), along with their credit limits.

10. Product Profitability
   Write a stored procedure that shows, for each product, the total revenue (quantityOrdered * priceEach), total cost (quantityOrdered * buyPrice), and profit (revenue – cost).

11. Orders by Status
   Create a stored procedure that takes a status (e.g., "Shipped", "Cancelled", "In Process") as input and returns all matching orders with their customer names and order dates.


Set 2: (If else, Case statement)

1. Customer Credit Check
   Given a `customerNumber` and an `orderAmount`, write a procedure that checks if the customer has enough credit limit left.

* Use IF/ELSE to print `"Approved"` or `"Declined"`.

2. Employee Role Message
   Given an `employeeNumber`, display a message based on jobTitle:

* `"Executive Level"` if President or VP
* `"Manager Level"` if jobTitle contains "Manager"
* `"Staff Level"` otherwise.
  Use a CASE statement.

3. Order Status Handler
   Given an `orderNumber`, return a custom message:

* `"Order already shipped"` if status = "Shipped"
* `"Order is in process"` if status = "In Process"
* `"Order is cancelled"` if status = "Cancelled"
* `"Other status"` otherwise.

4. Payment Classification
   Classify a payment amount as:

* `"High"` if amount > 50,000
* `"Medium"` if between 10,000 and 50,000
* `"Low"` otherwise.
  Use CASE.

5. Product Stock Category
   Given a `productCode`, classify stock levels:

* `"Critical"` if quantityInStock < 100
* `"Low"` if < 1000
* `"Sufficient"` otherwise.
  Use IF/ELSE.

6. Regional Sales Office Grouping
   Given an `officeCode`, return:

* `"North America"` if territory = "NA"
* `"Europe"` if territory = "EMEA"
* `"Asia-Pacific"` if territory = "APAC" or "Japan"
* `"Other"` otherwise.

7. Customer Risk Rating
   Rate a customer based on outstanding balance (total orders – payments):

* `"High Risk"` if outstanding > 100,000
* `"Medium Risk"` if between 50,000–100,000
* `"Low Risk"` otherwise.
  Use CASE.

8. Employee Bonus Eligibility
   Given an `employeeNumber`, check:

* If they are Sales Rep and have customers → `"Eligible for Bonus"`
* Otherwise → `"Not Eligible"`.
  Use IF/ELSE.

9. Order Delay Category
   For each order, classify delay as:

* `"On Time"` if shippedDate <= requiredDate
* `"Slightly Late"` if <= 7 days late
* `"Very Late"` if > 7 days late.
  Use CASE with `DATEDIFF`.

10. Product Price Band
   Classify a product’s MSRP as:

* `"Budget"` if < 50
* `"Standard"` if between 50–150
* `"Premium"` if > 150.

11. Payment Method Based on Amount
   Simulate decision-making:

* If payment < 10,000 → `"Cash Preferred"`
* If between 10,000–100,000 → `"Cheque Accepted"`
* Else → `"Bank Transfer Required"`.
  Use IF/ELSEIF/ELSE.


Set 3: (Loops)

🔁 LOOP, LEAVE

1. Print Numbers 1–N
Write a procedure that takes `N` as input and uses a simple `LOOP` to print numbers from 1 to N (store them in a temporary table or use `SELECT`).

2. Calculate Factorial
Write a procedure that calculates factorial of a given number using a `LOOP` and exits with `LEAVE`.

3. Sum of Even Numbers
Create a procedure that sums even numbers from 1 to N using `LOOP` and `LEAVE`.

4. Employee Email Collector
Iterate over all employees using a cursor inside a `LOOP`, and build a comma-separated list of their emails.

5. Increase Stock in Steps
Write a procedure that increases `quantityInStock` for a given product by +5 units repeatedly until it reaches at least 100. Use `LOOP` and `LEAVE`.

🔁 WHILE

6. Countdown
Create a procedure that takes a number as input and counts down to 1 using a `WHILE` loop.

7. Customer Credit Increment
Write a procedure that increases the `creditLimit` of a given customer by 500 repeatedly while it is less than 10,000.

8. Search for Employee by Name
Simulate searching employees in a loop: use `WHILE` with a cursor to iterate through employees until you find one with lastName = 'King', then exit.

🔁 REPEAT

9. Generate Payment Schedule
Write a procedure that generates 12 monthly payment dates starting from today using a `REPEAT` loop, inserting into a temporary table.

10. Multiplication Table Generator
Create a procedure that, given a number, generates its multiplication table up to 10 using a `REPEAT` loop.